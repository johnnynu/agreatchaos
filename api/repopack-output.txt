================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-11T03:37:41.706Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
bootstrap
cmd/lambda/create_file/main.go
cmd/lambda/list_files/main.go
cmd/lambda/preview_file/main.go
create_files.zip
go.mod
go.sum
internal/handlers/create_file.go
internal/handlers/list_files.go
internal/handlers/preview_file.go
list_files.zip
pkg/utils/response.go
preview_file.zip

================================================================
Repository Files
================================================================

================
File: go.mod
================
module github.com/johnnynu/agreatchaos/api

go 1.22.3

require github.com/aws/aws-lambda-go v1.47.0 // indirect

================
File: go.sum
================
github.com/aws/aws-lambda-go v1.47.0 h1:0H8s0vumYx/YKs4sE7YM0ktwL2eWse+kfopsRI1sXVI=
github.com/aws/aws-lambda-go v1.47.0/go.mod h1:dpMpZgvWx5vuQJfBt0zqBha60q7Dd7RfgJv23DymV8A=

================
File: internal/handlers/create_file.go
================
package handlers

import (
	"context"

	"github.com/aws/aws-lambda-go/events"
	"github.com/johnnynu/agreatchaos/api/pkg/utils"
)

func CreateFile(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return utils.ResponseOK("Created file successfully")
}

================
File: internal/handlers/list_files.go
================
package handlers

import (
	"context"

	"github.com/aws/aws-lambda-go/events"
	"github.com/johnnynu/agreatchaos/api/pkg/utils"
)

func ListFiles(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return utils.ResponseOK("Listed files successfully")
}

================
File: internal/handlers/preview_file.go
================
package handlers

import (
	"context"

	"github.com/aws/aws-lambda-go/events"
	"github.com/johnnynu/agreatchaos/api/pkg/utils"
)

func PreviewFile(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return utils.ResponseOK("Get file successfully")
}

================
File: pkg/utils/response.go
================
// pkg/utils/response.go
package utils

import (
	"encoding/json"

	"github.com/aws/aws-lambda-go/events"
)

func ResponseOK(body interface{}) (events.APIGatewayProxyResponse, error) {
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return ResponseError(err)
	}

	return events.APIGatewayProxyResponse{
		StatusCode: 200,
		Body:       string(bodyBytes),
		Headers: map[string]string{
			"Content-Type": "application/json",
		},
	}, nil
}

func ResponseError(err error) (events.APIGatewayProxyResponse, error) {
	return events.APIGatewayProxyResponse{
		StatusCode: 500,
		Body:       err.Error(),
		Headers: map[string]string{
			"Content-Type": "application/json",
		},
	}, nil
}

================
File: cmd/lambda/create_file/main.go
================
package main

import (
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/johnnynu/agreatchaos/api/internal/handlers"
)

func main() {
	lambda.Start(handlers.CreateFile)
}

================
File: cmd/lambda/list_files/main.go
================
package main

import (
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/johnnynu/agreatchaos/api/internal/handlers"
)

func main() {
	lambda.Start(handlers.ListFiles)
}

================
File: cmd/lambda/preview_file/main.go
================
package main

import (
	"log"

	"github.com/aws/aws-lambda-go/lambda"
	"github.com/johnnynu/agreatchaos/api/internal/handlers"
)

func main() {
	log.Println("Lambda function starting")
	lambda.Start(handlers.PreviewFile)
}
